KAUF-001 – Fahrzeug kaufen

Implementierung des Kaufprozesses mit schrittweiser Benutzerführung.

Sichere Integration der Zahlungsabwicklung (z. B. Verschlüsselung, Payment-Gateway).

Erstellung und Versand einer Kaufbestätigung inkl. Fehlermeldungen bei falschen Zahlungsdaten.

VERK-001 – Fahrzeug bewerten lassen

Formular zur Fahrzeuginformationseingabe entwickeln.

Bewertungslogik (Preisermittlung, Marktwertabgleich) implementieren.

Bewertungsübersicht im Frontend darstellen.

KAUF-002 – Probefahrt buchen

Kalender- und Terminübersicht für Probefahrten entwickeln.

Buchungsfunktion inkl. Bestätigungsmail implementieren.

Stornierungsfunktion für gebuchte Probefahrten erstellen.

NUTZ-001 – Fehlermeldungen bei falscher Eingabe

Validierungslogik für Formulareingaben entwickeln.

Benutzerfreundliche Fehlermeldungen implementieren.

Echtzeitprüfung (z. B. durch Client-Side-Validierung) einbauen.

KAUF-003 – Schutz der Zahlungsdaten

Verschlüsselung bei Speicherung und Übertragung implementieren.

Sicherheitshinweise im UI anzeigen.

Sicherheitsrelevante Tests (Penetrationstests, Unit Tests) durchführen.

ADM-001 – Systemstabilität bei hoher Nutzerzahl

Monitoring-Dashboard für Serverlast und Performance einrichten.

Last- und Stresstests durchführen.

Benachrichtigungssystem bei Überlastung konfigurieren.

DEV-001 – Projekt schnell aufsetzen

Setup-Anleitung in README.md schreiben.

Installation und Startbefehle dokumentieren.

Test des Projekt-Setups auf einer sauberen Entwicklungsumgebung.

NUTZ-002 – Kontaktseite aufrufen

Menüpunkt „Contact“ einfügen.

Kontaktseite mit Adress- und Kommunikationsdaten erstellen.

Darstellung und Layout testen.

NUTZ-003 – Services-Seite aufrufen

Menüpunkt „Services“ hinzufügen.

Services-Seite mit Leistungsübersicht erstellen.

Texte/Erklärungen für die einzelnen Services verfassen.

ADM-002 – Verkäufe einsehen

Backend-Endpunkt zur Abfrage aller Verkäufe implementieren.

Filterfunktion (z. B. nach Datum oder Fahrzeug) einbauen.

Detailansicht eines einzelnen Verkaufs erstellen.

ADM-003 – Benutzerdaten einsehen

Suchmaske für Benutzer implementieren.

Benutzerübersicht mit den wichtigsten Daten anzeigen.

Detailseite für einzelne Benutzer umsetzen.

NUTZ-004 – Header anzeigen

Header-Komponente für alle Seiten erstellen.

Branding (Logo, Titel) im Header einfügen.

Sichtbarkeit und Responsiveness testen.

NUTZ-005 – Footer/Impressum anzeigen

Footer-Komponente für alle Seiten entwickeln.

Link zum Impressum einfügen.

Footer auf allen Endgeräten prüfen.

OPS-001 – ESLint für Frontend-Codequalität

ESLint im Projekt konfigurieren.

Regeln für Code-Standards festlegen.

Integration in den CI-Prozess sicherstellen.

OPS-002 – Prettier für Codeformatierung

Prettier im Projekt konfigurieren.

Formatierungsregeln definieren (z. B. in .prettierrc).

Prettier-Hook im Git-Workflow einbinden.

OPS-003 – JUnit Integrationstests Backend

Testumgebung mit JUnit konfigurieren.

Integrationstests für zentrale Services schreiben.

CI-Integration für automatisierte Testläufe aufsetzen.

OPS-004 – Jasmine & Karma für Frontend-Tests

Jasmine & Karma im Projekt konfigurieren.

Unit-Tests für erste Komponenten erstellen.

Testabdeckung im CI auswerten.

OPS-005 – OWASP Dependency-Check

OWASP Dependency-Check ins Build-System integrieren.

Abhängigkeiten regelmäßig auf Schwachstellen scannen.

Berichte über kritische Lücken dokumentieren.

OPS-006 – OWASP ZAP für dynamische Sicherheitstests

OWASP ZAP im CI-Prozess einbinden.

Security-Tests gegen das laufende System ausführen.

Sicherheitsberichte generieren und bereitstellen.

OPS-007 – Trivy Security Scans

Trivy im CI/CD integrieren.

Container-Images auf Schwachstellen scannen.

Ergebnisse in Security-Dashboard dokumentieren.

OPS-008 – GitHub Branch-Strategie

Branch-Strategie dokumentieren (README.md oder CONTRIBUTING.md).

Schutzregeln für Branches (z. B. main, develop) einrichten.

Pull-Request-Workflow implementieren.

OPS-009 – Maven für Backend-Artefakte

Maven-Projektstruktur einrichten.

Build-Skripte für Artefakte schreiben.

Deployment-Prozess mit Maven testen.

OPS-010 – Angular CLI für Frontend-Build

Angular CLI im Projekt konfigurieren.

Produktions-Build-Prozess einrichten.

Build-Ergebnisse auf Performance prüfen.

OPS-011 – Docker-Multi-Container-Setup

Dockerfiles für Frontend, Backend und DB schreiben.

Container-Setup erstellen und starten.

Zusammenspiel der Container testen.

OPS-012 – Docker Compose Orchestrierung

docker-compose.yml erstellen.

Start- und Stop-Skripte dokumentieren.

Funktionstest mit allen Services durchführen.

OPS-013 – Bash-Skripte für DB-Updates

Bash-Skript für Datenbank-Updates erstellen.

DeltaScripts für Schemaänderungen einbinden.

Testlauf mit Beispiel-DB durchführen.

OPS-014 – Logfile-Analyse

Logfiles zentralisieren (z. B. in einem Ordner/Tool).

Such- und Filterfunktionen implementieren.

Dokumentation für Logfile-Auswertung erstellen.

OPS-015 – Nutzerdokumentation

Nutzerhandbuch erstellen.

Anleitungen für zentrale Funktionen dokumentieren.

Dokumentation veröffentlichen (z. B. PDF oder Wiki).

OPS-016 – Elasticsearch für Log-Analyse

Elasticsearch installieren und konfigurieren.

Log-Sammlung einrichten.

Such- und Analysefunktionen testen.

OPS-017 – Prometheus für Monitoring

Prometheus im System integrieren.

Metriken für Backend und Frontend definieren.

Alerts bei kritischen Werten konfigurieren.
